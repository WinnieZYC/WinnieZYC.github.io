[ { "title": "在服务器上发布页面", "url": "/posts/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%8F%91%E5%B8%83%E9%A1%B5%E9%9D%A2/", "categories": "服务器", "tags": "服务器", "date": "2022-07-05 02:34:00 +0000", "snippet": "" }, { "title": "服务器科普", "url": "/posts/%E6%9C%8D%E5%8A%A1%E5%99%A8/", "categories": "服务器", "tags": "服务器", "date": "2022-05-19 02:34:00 +0000", "snippet": "服务器软件大科普！_哔哩哔哩_bilibili静态服务：主要提供静态资源，不同用户访问到的资源相同动态服务：提供动态服务，不同用户访问到的资源不同服务器的几个叫法：\tweb服务器：广义上来说，就是响应用户的需求，提供服务，当下所有的服务器软件都可以称之为web服务器软件\tHTTP服务器(静态服务)：使用HTTP协议传输资源，提供服务\t应用服务器(动态服务)：一个特定应用的承载容器常见的轻量级服务器软件：\t1、Nginx：典型的静态服务器，可做反向代理、负载均衡，一般放在最前面直面用户，和后端Tomcat打配合；纯C写的，性能贼高、内存消耗极少、稳定性也相当好，互联网公司重度使用\t2、Tengine：阿里出品，基于Nginx服务器做的改造(加强和封装)，对大流量场景做了很多高级功能，性能、稳定性优秀\t3、Apache http server：也是静态服务器，但是不如Nginx\t3、IIS：微软开发，只能用在Windows下，具有应用服务器能力的http服务器\t4、Tomcat：Apache出品，典型的应用服务器软件，符合Servlet标准的应用容器，也可以提供http服务，但一般不会作为http服务器；是Spring Boot框架默认的内置服务器\t5、Jetty：跟Tomcat是一个性质的东西，符合Servlet标准的应用容器，也是Spring Boot框架支持的服务器，但不是默认的\t6、Undertow：红帽子出品，跟Tomcat、Jetty一样也是Spring Boot框架支持的服务器，但不是默认的；高并发时性能优于Tomcat、Jetty几款商用重量级的服务器软件：\t1、JBoss(从8版开始更名为WildFly)：不仅是Servlet应用容器，更是EJB的应用容器，整套JavaEE框架部署的解决方案\t2、WebLogic：Oracle公司出品，用于部署企业级JavaEE应用，全能型，几乎支持JavaEE所有的应用规范\t3、WebSphere：IBM公司出品，支持更多JavaEE的应用规范的综合应用服务器" }, { "title": "js数据结构与算法", "url": "/posts/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/", "categories": "数据结构与算法", "tags": "javascript", "date": "2022-05-19 02:34:00 +0000", "snippet": "数组数组操作numbers = []//末尾处添加或者删除numbers.push()numbers.pop()//开头处添加或者删除numbers.unshift()numbers.shift()//指定位置添加或者删除numbers.splice(位置,数量)numbers.splice(位置,0,插入的数)forEach迭代不会返回新数组,map会返回新数组,map函数储存了结果的数组从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。数组排序numbers.reverse()numbers.sort(fn) //默认为字符串排序,数组时字符串元素时比较首字母的ASCII值,可以设置比较函数数组搜索numbers.indexOf(number) //如果包含，返回索引，不包含，返回-1numbers.find(fn) //返回让函数返回ture的时候的数组元素的值numbers.findIndex(fn) //返回让函数返回ture的时候的数组元素的索引numbers.includes(number) //是否包含，返回true或者false数组转字符串numbers.toString() //转换为字符串numbers.join(\"-\") //转换为字符串，添加分隔符类型数组栈" }, { "title": "js_Github资源", "url": "/posts/js_Github%E8%B5%84%E6%BA%90/", "categories": "js学习资源", "tags": "javascript", "date": "2022-05-19 02:34:00 +0000", "snippet": "1.javascript-algorithms(基于javascript的算法和数据结构)https://github.com/trekhleb/javascript-algorithms2.nodebestpractices(Node.js最佳实践)https://github.com/goldbergyoni/nodebestpractices3.You-Dont-Know-JS(你不知道的js这本书的开源版本)https://github.com/getify/You-Dont-Know-JS4.clean-code-javascript(教你如何写出更好可读性的js代码)https://github.com/ryanmcdermott/clean-code-javascript5.30-seconds-of-code(开发时常用的简短代码)https://github.com/30-seconds/30-seconds-of-code国内极速版—– https://gitee.com/mirrors/javascript-algorithms/tree/master - JS 算法 https://gitee.com/mirrors/nodebestpractices?_from=gitee_search - node 最佳实践 https://gitee.com/crazy3/You-Dont-Know-JS?_from=gitee_search -你不知道的js https://gitee.com/mirrors_trending/clean-code-javascript?_from=gitee_search - 好坏代码之分 https://gitee.com/seconds-of-code/30-seconds-of-code?_from=gitee_search - 30s code?" }, { "title": "地图投影", "url": "/posts/%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1/", "categories": "GIS基础", "tags": "重学GIS", "date": "2022-05-17 02:34:00 +0000", "snippet": "概述地理坐标系 地理坐标系是基于椭球的 将静止的水面形容地球表面的基准，延伸到陆地得到大地水准面，大地水准面也包含着高程信息 将水准面近似一个椭球，用一个数学公式形容这个椭球，得到椭球体(Ellipsoid)，因为需要被数学公式表达，所以高程信息被简化了。这一步只是用数学公式的五个参数大致描述了地球的形状 地球表面上的物体具有高程，在椭球体的基础上考虑高程信息，得到基准面(Datum)，基准面确定了x y z和坐标原点，不同基准面可以通过七参数转换，坐标系在这一步建立了，上一步的椭球体不需要坐标系 所有的计算是基于椭球体的，有时候需要根据不同的地理位置考虑拟合最好的方法，我们基于基准面将椭球体进行移动，得到参考椭球体，即根据基准面确定位置的椭球体，椭球体+基准面 = 参考椭球体 经纬度是基于参考椭球体的 地理坐标系是一套东西，不是某一个具体的坐标系。ArcGIS中包括椭球体和基准面等等 WGS1984基准面采用WGS84椭球体，它是一地心坐标系，即以地心作为椭球体中心，目前GPS测量数据多以WGS1984为基准投影坐标系 投影坐标系是基于地理坐标系的 投影相当于用一个函数实现地理坐标到投影坐标的映射Web坐标系注： 谷歌地图分为cn和com两个版本，cn版可通过https://www.google.cn/maps或https://ditu.google.cn访问，其中街道和影像都做了偏移；com版通过https://www.google.com/maps访问，其中在中国境内部分，街道做了偏移，而影像图并未偏移。（可在中朝或中越边界处得到印证） 天地图的900913版本，wkid=900913=3785=102113=3857（900913演变为3785，又和ESRI的102113一起改名为：3857），Web Mercator无偏移，因此在该版天地图下配准后的数据，导出kmz后可直接叠加到谷歌地球。 上表表明了哪些web地图在同一坐标系，可相互叠加：在一地图下配准，在另一地图可叠加。坐标转换js库地理坐标和投影坐标都能转proj4js/proj4js: JavaScript library to transform coordinates from one coordinate system to another, including datum transformations (github.com)基准面转换详解 七参数：3个平移因子（x,y,z）、三个旋转因子（x旋转,y旋转,z旋转）、一个比例因子（尺度变化k） 三参数：指的是3个平移因子（x,y,z），此时将旋转因子与比例因子视为0，三参数是七参数的一种特例。 一般区域范围不大，最远点间的距离不大于30km（经验值）情况下的坐标转换，可以采用三参数。如果知道三个以上的点其对应的两个坐标系下的坐标值，则可以用软件计算该区域适用的转换参数 缩放，表示为k，主要是由于测量误差产生的；平移为3个坐标轴方向上的平移，表示为dX、dY、dZ，这是由于原点不一样产生的；旋转为3个坐标轴的旋转，表示为rX、rY、rZ，这是坐标轴指向不一致产生的。" }, { "title": "前端框架发展", "url": "/posts/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%8F%91%E5%B1%95/", "categories": "前端基础", "tags": "javascript", "date": "2022-05-16 02:34:00 +0000", "snippet": "前端框架发展" }, { "title": "前端发展", "url": "/posts/%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95/", "categories": "前端基础", "tags": "javascript", "date": "2022-05-16 02:34:00 +0000", "snippet": "前端技术发展方向本文章的内容来自：前端视界：上帝视角纵览前端开发涉及的大部分领域_哔哩哔哩_bilibili横轴–ui驱动 全端、全栈moblie方向 Browser PWA : 脱离浏览器的窗口做的基于浏览器的应用，用到的技术都是web相关的，拓宽了我们之前只用于浏览器的一亩三分地的局面 小程序 : 小程序底层基于vue，摆脱纯粹的基于浏览器开发，更丰富的交互，相机，语音，支付等等 Hybrid : 混合开发，提供web-view(内嵌浏览器)的壳，提供了一些更底层的接口 RN : 完全脱离了web的思维，基于react视图描述的思维，应用层是前端来做，布局、交互等等的思维都不一样 flutter : 移动ui框架，底层基于Dart uniapp : vue，一套代码多端复用桌面端方向 Electron ：桌面端 canvas ：网页内容全部渲染在canvas中，缺点是缺乏结构 如 Figma IOT : 界面的开发，轻量级应用的需求，操作系统、图形界面占用的资源大 quicks架构方向 Nodejs serverless Nextjs 跟传统后端相比缺乏健壮性 remix纵轴–技术驱动 深度和广度工程化方向 Devops : Esbuild 工具链 : 能效化，工具帮人 国际化 : 性能安全 css Animation : 局限于web，Houdini js编程css能够有更丰富的效果编程语言方向 typescript : 从工程的角度，ts为了可读性更强 WebAssembly : 把别的语言编译成WebAssembly的格式，为js提供接口，拓展前端的能力 编译 : DSL -&gt; UI或者前端可执行的形式网络方向 AOMedia - WebRTC : 音视频 Video Player/Editor P2P Raw - Socket : 颠覆Web - Socket交互方向 Web3D/WebGPU/Webgl VR/WebXR应用场景方向 可视化 : 大屏/实时 游戏 : 阿里开源的Eva.js 蚂蚁森林 流媒体 : 短视频等 低代码 WebIDE 区块链 ML/AI : 前端使用深度学习的框架 WebOS 元宇宙 CloudRender : 流式的方式实现云端的渲染微前端 分而治之 技术栈无关前端的境界 百分之八十的人在写页面交互 百分之十五的人做产品和工具开发 百分之五的人在做标准和方案" }, { "title": "预编译", "url": "/posts/%E9%A2%84%E7%BC%96%E8%AF%91/", "categories": "前端基础", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "https://blog.csdn.net/weixin_44909683/article/details/106084956https://blog.csdn.net/zyz511919766/article/details/7276089" }, { "title": "零基础学leaflet", "url": "/posts/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6leaflet/", "categories": "GIS前端", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "day01加载高德和天地图天地图有多个图层（矢量切片、注记），可以用layerGroupday02图层切换，Control封装了方法day03svg添加到icon锚点定位，icon的坐标与图像坐标一致。左上角为原点注意坐标，高德和天地图坐标系不同day04geojson.io加载geojson文件 pointToLayerday05图层切换day06分类渲染day07tooltip 样式leaflet中的csspopup 样式设置htmllabel 用tooltip permanentday08小结day09耦合高德API地图用高德地图，上层叠加leaflet，从而用自定义风格的高德地图加上leaflet功能，直接用高德地图切片不能自定义样式day10leaflet支持两种渲染方式，可以切换渲染模式canvas 渲染性能较好 Canvas-Markers插件提升markers渲染性能svg 基于path path是html elementmarkers默认是imgday11同一类型的后画在上面marker单独的pane，在最上面1.setIndex对html element有效，canvas path无效2.bringToFront() bringToBack() 图层多时不适用3.createPane(‘myPane’).style.zIndex() 点线面默认是overlayPaneday12自定义弹出框bindpopup 设计html$字符串模板，填变量内容grid布局day13Label冲突检测LabelTextCollision 插件 tooltip继承于path的对象生成text对象的冲突检测原理是canvas 量算api measureText，只有canvas有，svg没有marker 没有渲染在canvas下，所以不能使用 改成circleMarker" }, { "title": "数据中的问题", "url": "/posts/%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/", "categories": "GIS数据", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "数据中的问题1.十分钟查询一次，但是数据更新频率没那么快，所以数据中会出现重复值" }, { "title": "思考（待分类）", "url": "/posts/%E6%80%9D%E8%80%83/", "categories": "前端基础", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "2022.1.26不改变视觉效果的情况下，减少场景的复杂性2022.2.15this指向//1. 普通函数//普通函数的this指向windowfunction fn(){ console.log(this);}; fn();// fn.call();//2. 对象的方法//对象的方法 this指向的是对象ovar o ={ sayHi:function (){ console.log(this); }};o.sayHi();//3. 构造函数//构造函数的this指向实例对象ldh//原型对象的this指向实例对象ldhfunction Star(){ console.log(this);};Star.prototype.sing = function (){ console.log(this);}var ldh = new Star();ldh.sing();//4. 绑定事件函数//this 指向函数调用者btnbtn.onclick = function (){ console.log(this);};//点击就可以调用//5. 定时器函数//定时器里面的this指向windowsetInterval(function (){ console.log(this)},3000);//这个函数是定时器自动1s调用一次//6. 立即执行函数//立即执行函数里面的this指向window(function (){ console.log(this);})();//立即执行函数是自动调用————————————————版权声明：本文为CSDN博主「cake_eat」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/cake_eat/article/details/108851411fetch方法.then(data)=&gt;{ console.log(data);}fetch(\"http://localhost:3000/books?id=123456\",{ method:\"get\"}).then(function(value1){ console.log(value1); return \"hello\";}).then(function(value2){ console.log(value2); return \"HelloWorld\";})/*.then(function(data){ console.log(data); return data.text(); })*/.then(data=&gt;{ console.log(data);})2022.2.16插件vscode-iconsBracket Pair ColorizerBeautifyAuto Close Tag异步返回值问题https://www.jb51.net/article/100661.htmJS时间比较//参考地址: https://www.cnblogs.com/Byme/p/7687313.htmlfunction tab(date1,date2){\tvar oDate1 = new Date(date1);\tvar oDate2 = new Date(date2);\tif(oDate1.getTime() &gt; oDate2.getTime()){\t\tconsole.log('第一个大');\t} else if(oDate1.getTime() &lt; oDate2.getTime()){\t\tconsole.log('第二个大');\t}else if(oDate1.getTime() == oDate2.getTime()){\t\t\tconsole.log('一样大');\t}}tab('2015-10-10 00:00:00','2015-10-03 00:00:00');tab('2015-10-10','2015-10-03');这样的时间格式都是可以的；需要注意的是中间的分割符号 '-'必须是英文的；否者不能够比较；今天不晓得为啥，写成了中文符号，英文符号中中文符号是有区别的时间格式这一种，要使用英文符号new Date()参数格式如下：（ 得到一个中国标准时间 ）1、用整数初始化日期对象 var date1 = new Date(2017,06,06); console.log(date1); // Thu Jul 06 2017 00:00:00 GMT+0800 (中国标准时间) var date1 = new Date(2017,1,1); console.log(date1); // Wed Feb 01 2017 00:00:00 GMT+0800 (中国标准时间) var date1 = new Date(2017,01-2,01); console.log(date1); // Thu Dec 01 2016 00:00:00 GMT+0800 (中国标准时间) var date1 =new Date(2017,06,06,06,06,06); console.log(date1); // Thu Jul 06 2017 06:06:06 GMT+0800 (中国标准时间) 说明： new Date( year, month, date, hrs, min, sec) 按给定的参数创建一日期对象2、用字符串初始化日期对象 var date2 = new Date(“2017/06/06”); console.log(date2); // Tue Jun 06 2017 00:00:00 GMT+0800 (中国标准时间) var date2 = new Date(“2017-08-08”); console.log(date2); // Tue Aug 08 2017 08:00:00 GMT+0800 (中国标准时间) var date2 = new Date(“2017-9-9”); console.log(date2); // Sat Sep 09 2017 00:00:00 GMT+0800 (中国标准时间) getTime() 返回从 1970 年 1 月 1 日（指定日期）至今的毫秒数var d=new Date();document.write(\"从 1970/01/01 至今已过去 \" + d.getTime() + \" 毫秒\");2022.2.17去除重复值https://www.cnblogs.com/shj-com/p/7458510.html排序https://blog.csdn.net/m0_37885651/article/details/800167182022.2.18JS 深拷贝和浅拷贝https://www.jianshu.com/p/f4329eb1bacehttps://blog.csdn.net/HOMEXS/article/details/114947344可视化leaflet+Echartshttps://www.cnblogs.com/giserhome/p/11203941.html带箭头的线https://www.cnblogs.com/s0611163/archive/2020/08/01/13414151.htmlhttps://www.cnblogs.com/xtfge/p/9949063.htmlmapbox和leaflet对比https://blog.csdn.net/wyf86/article/details/103704914debug//清空画图区域 let container = document.getElementById(\"canvas\") let ctx = container.getContext(\"2d\") ctx.clearRect(0, 0, container.width, container.height);//这里是container 一个实例https://www.cnblogs.com/yijiaming/p/11540022.htmlleaflet示例https://blog.csdn.net/QQ98281642/article/details/117514585CSS实现自适应屏幕高度&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;meta charset=\"UTF-8\"&gt;&lt;title&gt;Document&lt;/title&gt;&lt;style&gt;body,html{margin:0px;height:100%;}.div1{width:100px;height:100%;background:red;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"div1\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;deck.glhttps://ld246.com/article/1605362989924kepler.glhttps://blog.csdn.net/sinat_41310868/article/details/114108212Unfolded StudioES6 支持函数带有默认参数function myFunction(x, y = 10) { // y is 10 if not passed or undefined return x + y;} myFunction(0, 2) // 输出 2myFunction(5); // 输出 15, y 参数的默认值DBSCANhttps://www.cnblogs.com/sddai/p/7911680.htmlhttps://blog.csdn.net/weixin_37831477/article/details/78953043Eventjavascript中，const声明的对象和var声明的对象有何异同？块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域2022.3.7RGBA转16进制function hexify(color) { var values = color .replace(/rgba?(/, ‘’) .replace(/)/, ‘’) .replace(/[\\s+]/g, ‘’) .split(‘,’); var a = parseFloat(values[3] || 1), r = Math.floor(a * parseInt(values[0]) + (1 - a) * 255), g = Math.floor(a * parseInt(values[1]) + (1 - a) * 255), b = Math.floor(a * parseInt(values[2]) + (1 - a) * 255); return “#” + (“0” + r.toString(16)).slice(-2) + (“0” + g.toString(16)).slice(-2) + (“0” + b.toString(16)).slice(-2);}var myHex = hexify(‘rgba(255,232,186,0.4)’); // “#f5faf3”console.log(myHex);https://blog.csdn.net/qq_37198814/article/details/82024338聚类算法（DBSCAN、OPTICS、KMeans）https://github.com/LukaszKrawczyk/density-clustering三角剖分https://gitee.com/mirrors/delaunator11级切片，200hifleetst爬出来的数据转json文档marker svg不能显示符号 尺寸？private、publichttps://blog.csdn.net/heyue_99/article/details/68945650https://blog.csdn.net/qq_38045106/article/details/84666638scss转csshttps://www.sassmeister.com/开源社区https://blog.csdn.net/weixin_46078894/article/details/108954974proj4js函数放进任务队列先执行主线程Event Loop只指定成员变量的名称 id = 'world'; let obj = { name: 'hello', id } console.log(obj.id);创建二维数组https://www.cnblogs.com/lhs-fight/p/14212969.html一个函数有异步一个函数有 function a() { setTimeout(function () { console.log(\"b\") }, 1000); console.log(\"a\"); } function c() { console.log(\"c\"); } a(); c(); //a //c //b前端技术总结https://www.kancloud.cn/zhangqh/front/302716https://juejin.cn/post/6974356682574921765原始类型和引用类型1.赋值的区别 引用 值2.比较的区别3.传参的区别https://www.zhihu.com/question/504120353/answer/2262155770https://blog.csdn.net/huihui_999/article/details/120939161https://www.cnblogs.com/kgwei520blog/p/13667378.htmlNodejs解决乱码https://www.yisu.com/zixun/621728.htmlvue create 和vue init webpack的区别https://blog.csdn.net/qq_22182989/article/details/103611934https://blog.csdn.net/weixin_42581303/article/details/123644358display: none;DOM 结构：浏览器不会渲染 display 属性为 none 的元素，不占据空间；事件监听：无法进行 DOM 事件监听；性能：动态改变此属性时会引起重排，性能较差；继承：不会被子元素继承，毕竟子类也不会被渲染；transition：transition 不支持 display。visibility: hidden;DOM 结构：元素被隐藏，但是会被渲染不会消失，占据空间；事件监听：无法进行 DOM 事件监听；性 能：动态改变此属性时会引起重绘，性能较高；继 承：会被子元素继承，子元素可以通过设置 visibility: visible; 来取消隐藏；transition：transition 不支持 display。opacity: 0;DOM 结构：透明度为 100%，元素隐藏，占据空间；事件监听：可以进行 DOM 事件监听；性 能：提升为合成层，不会触发重绘，性能较高；继 承：会被子元素继承,且，子元素并不能通过 opacity: 1 来取消隐藏；transition：transition 不支持 opacity。‘vue-cli-service’ 不是内部或外部命令，也不是可运行的程序或批处理文件。解决方法：npm installmysql5.7+SQLyog 安装https://zhuanlan.zhihu.com/p/373515920https://blog.csdn.net/junR_980218/article/details/124419384天若https://blog.csdn.net/u014723479/article/details/121177187洋葱模型https://zhuanlan.zhihu.com/p/279391637https://zhuanlan.zhihu.com/p/417163957midway-&gt;egg-&gt;koanest-&gt;expressjs内存泄漏https://segmentfault.com/a/1190000020231307入门文章，写的很好https://zhuanlan.zhihu.com/p/74546693" }, { "title": "同步与异步", "url": "/posts/%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%90%8C%E6%AD%A5&%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/", "categories": "前端基础", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "异步与同步https://www.cnblogs.com/Yellow-ice/p/10433423.htmlsetTimeout执行问题https://segmentfault.com/q/1010000009490850https://segmentfault.com/q/1010000012952958立即执行函数与异步函数https://www.cnblogs.com/vickylinj/p/12191958.html看不懂https://www.jb51.net/article/188925.htm变量提升变量提升，很简单，就是把变量提升提到函数的最top的地方调用的同名函数是后声明的，函数提升https://cloud.tencent.com/developer/article/1705113?from=article.detail.1385798匿名函数与闭包闭包本身定义比较抽象，MDN官方上解释是：A closure is the combination of a function and the lexical environment within which that function was declared.闭包是一个函数和该函数被定义时的词法环境的组合https://www.jianshu.com/p/0a3150afb7edjs执行顺序https://www.jianshu.com/p/62c7d633a879https://segmentfault.com/a/1190000012220307" }, { "title": "三角网", "url": "/posts/%E4%B8%89%E8%A7%92%E7%BD%91/", "categories": "GIS基础知识", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "https://blog.csdn.net/A15505289299/article/details/79169994" }, { "title": "Node安装", "url": "/posts/vue%E5%AE%89%E8%A3%85/", "categories": "安装与配置", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "安装nodejs新版本nodejs已经包含npm注意要修改.npmrc和npmrc设置模块缓存和全局位置https://www.cnblogs.com/fisheleven/p/6775380.html?utm_source=itdadao&amp;utm_medium=referral通过 npm config ls 、npm get prefix 来查看当前的全局目录安装vue vue-clivue listvue -V" }, { "title": "typescript", "url": "/posts/typescript/", "categories": "前端基础", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "object与anyhttps://blog.csdn.net/wq_static/article/details/50238291class Blablabla { field: Object; //Object}var my = function(bla: Blablabla){ bla.field.comingMethod(); //错误, 属性comingMethod在Object不存在}//修改成any类型后class Blablabla { field: any; //any}var my = function(bla: Blablabla){ bla.field.comingMethod(); //OK, 只有在运行时才会关心comingMethod方法是否真的存在.}//可以在运行时动态分配方法var bla = new Blablabla();bla.field = { comingMethod: function(){ console.log('hi any!'); } //lambda表达式写法: //comingMethod: ()=&gt; console.log('hi any!')}my(bla); // hi any!getter js ts通用" }, { "title": "mapbox gl", "url": "/posts/mapbox/", "categories": "GIS前端", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "一个数据源可以画很多个图层https://lzugis.blog.csdn.net/article/details/105079832?spm=1001.2014.3001.5502https://www.yuque.com/feizhoubeijixiong/hgrzai/gmfbgghttp://t.zoukankan.com/amadoGrowers-p-12047847.html总结https://www.fenxianglu.cn/article/87中文官方文档http://www.mapbox.cn/mapbox-gl-js/example/simple-map/https://mapbox.allanhao.com/advance/#%E6%A6%82%E8%BF%B0geojson-vthttps://cloud.tencent.com/developer/ask/sof/1005465example；Draw a polygon and calculate its areahttps://docs.mapbox.com/mapbox-gl-js/example/mapbox-gl-draw/V神https://agafonkin.com/样式规范https://www.cnblogs.com/leeke98/p/12713302.htmlspritehttp://cn.voidcc.com/question/p-rsehaqxh-bkc.htmlhttps://qastack.cn/gis/179255/mapbox-gl-addlayer-where-are-the-icon-images-coming-from" }, { "title": "leaflet知识点", "url": "/posts/leaflet%E7%9F%A5%E8%AF%86%E7%82%B9/", "categories": "GIS前端", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "leaflet官方文档https://leafletjs.com/reference-1.3.4.html#pathhttps://leafletjs.com/reference-1.3.4.html#map-exampleleaflet学习路径https://zhuanlan.zhihu.com/p/146541881leaflet知识点https://blog.csdn.net/sinat_31213021/category_10775457.html加入OSM底图https://blog.csdn.net/xu762102319/article/details/88828616画线装饰插件https://www.jianshu.com/p/40094c2ab109leaflet删除要素单个删除...var gMark = L.marker([lat,lng],{...})\tgMark.on({\t\t\"click\":function(e){\t\t\tzsMap.removeLayer(this) //在地图上删除点击的那个mark\t\t }\t})https://blog.csdn.net/qq_41713136/article/details/111935333批量删除将要素加入图层// 定义maker集合var marker_group;//可通过item.id找到对应的maekervar marker_map={};//创建点集合function createMarkerGroup (data){\tvar markers = [];\tdata.forEach(function (item) {\t\ticon = new L.icon({\t\t iconUrl: ' /static/icon/icon.png' ,//图标路径\t\t iconSize: [32, 32],\t\t iconAnchor: [16, 32]\t\t});\t\tvar marker = new L.marker(30, 118), {\t\t icon: icon,\t\t riseOnHover: true,\t\t title: item.name\t\t});\t\tmarkers.push(marker);\t\tmarker_map[item.id] = marker;\t}\tmarker_group = new L.layerGroup(markers).addTo(map);}删除图层//清除点集合function clearMarkerGroup (){\tif(marker_group){\t\tmarker_group.clearLayers();\t}https://blog.csdn.net/weixin_43933561/article/details/102706873leaflet学习视频https://www.bilibili.com/video/BV16v41157rg?from=search&amp;seid=11034634565184126674&amp;spm_id_from=333.337.0.0https://www.bilibili.com/video/BV1sZ4y1W7mG?from=search&amp;seid=11034634565184126674&amp;spm_id_from=333.337.0.0leaflt地图聚类https://www.cnblogs.com/boonya/p/12256119.html聚合+符号https://www.pianshen.com/article/13621891501/https://www.freesion.com/article/104345687/https://www.cnblogs.com/gisarmory/p/14035305.htmlleaflet自定义标签的方法divIcon方式canvas-marker插件常用的前端地图框架（WebGIS框架） LeafletLeaflet 是最著名的前端地图可视化库，它开源、体积小、结构清晰、简单易用。 Mapbox GL JSMapbox GL JS 是目前最新潮的前端地图库，它的矢量压缩、动态样式和三维性能令人印象深刻。它本身是开源的，但一般依赖于Mapbox公司提供的底图服务。 ArcGIS API for JSArcGIS API for JS 是较为学院派的前端地图库，它是ArcGIS开发套件中的一部分，和桌面端和服务器端ArcGIS软件有较好的协作。它不开源且收费不低，在学术场景下较为常用。 OpenlayersOpenlayers 也是常用的前端地图库，它开源，相比于Leaflet更加复杂和完备。 CesiumCesium 是三维地理可视化的常用库，在大尺度的可视化（地形、建筑、地球）中十分常用。 百度地图 JS API /百度地图 API GL百度地图 JS API 是传统的二维地图，百度地图 API GL 是三维地图，它们依赖百度地图提供的后台服务。除了地图服务外还有检索、导航、实时交通等关联服务。开发者有免费的限额。 高德地图 JS API高德地图 JS API 与百度类似。 Google Maps JS API谷歌地图 JS API 在境外有更好的数据。 AntV L7AntV L7 是空间数据可视化库，它可以使用高德地图等协作构建地图可视化。 Mapbox.jsMapbox.js 是 Leaflet 的一个扩展插件（与 Mapbox GL JS 不同）。作者：KianZh链接：https://juejin.cn/post/6989552050820349988来源：稀土掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。https://juejin.cn/search?query=leaflethttp://t.zoukankan.com/unique1319-p-7813858.htmlleaflet投影转换https://blog.csdn.net/sinat_31213021/article/details/118897871three.js和mapboxhttps://blog.csdn.net/weixin_42465953/article/details/112493931leaflet默认坐标系 L.CRS.EPSG3857https://segmentfault.com/a/1190000013718011/https://github.com/lvisei/leaflet-demo" }, { "title": "javascript进阶", "url": "/posts/javaScript%E8%BF%9B%E9%98%B6/", "categories": "xiaozhoubg", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "1.原始类型和引用类型2.浅拷贝深拷贝 深拷贝：递归和转化为json3.包装对象 Number() String() Boolean()4.对象转换 显式和隐式 parseInt和parseFloat有截取的效果5.作用域6.闭包与模块化没传入参数的是undefined,if(undefined){}7.面向对象 class es6才有8.原型对象9.this关键字箭头函数没有自己的this值，箭头函数中所使用的this都是来自函数作用域链，它的取值遵循普通普通变量一样的规则，在函数作用域链中一层一层往上找。9.bind、apply、call方法call 继承 多重继承call,apply都会在改变指向时调用方法，bind会返回一个新的函数11.异步编程解决方法：回调函数Promise resolvePromise async因为函数是瞬间执行的，所以相当于没有returngetTea()方法中，fn为传入的函数，在getTea()中执行fn()然后再退出正则表达式/123/" }, { "title": "javascript基础", "url": "/posts/javaScript%E5%9F%BA%E7%A1%80/", "categories": "xiaozhoubg", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "ES6：1.let2.const3.模板字符串 ` ` ${ }4.解构" }, { "title": "html&css", "url": "/posts/html-css/", "categories": "xiaozhoubg", "tags": "html&css", "date": "2022-05-13 02:34:00 +0000", "snippet": "html属性 src class idcss选择器 元素选择器（h1,img) class选择器 id选择器 通配符选择器（*）css选择器进阶 层级选择器 : selector1 selector2 组合选择器 : selector1 selector2 伪类选择器（增加行为）: selector:hover 伪元素选择器（增加元素）: slector::before selector::after引入css方法 嵌入式 内联样式 外部样式盒子模型 边框 border-width -style -color 内边距 外边距html元素分类 块元素: 可以设置宽度和高度，独立成行 h1-6、p、div、ul、li 行内元素：不可以设置宽度和高度，不独立成行 a、span 行内块元素 img、input、button" }, { "title": "MVT", "url": "/posts/MVT/", "categories": "GIS前端", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "切片预缓存 tippecanoe查询优化 按需求分层" }, { "title": "GIS JS可视化库", "url": "/posts/GIS-JS%E5%8F%AF%E8%A7%86%E5%8C%96%E5%BA%93/", "categories": "GIS前端", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "可视化 Deck.glhttps://blog.csdn.net/wclwksn2019/article/details/109048477http://www.f2edev.com/39.html空间计算 Turf.js地图交互绘制 nebula.gl推荐技术栈amap + g2/ amap + L7mapbox + deck.gl/echarts.glEcharts gl https://juejin.cn/post/6844903555992649742https://juejin.cn/post/7021328176357998628https://segmentfault.com/a/1190000012252485" }, { "title": "GIS JS API", "url": "/posts/GIS-JS-API/", "categories": "GIS前端", "tags": "javascript", "date": "2022-05-13 02:34:00 +0000", "snippet": "package.jsonmodule 作为第三方的API这一步需要配置 模块名/入口npm install 安装依赖npm install -g 全局安装 运行依赖npm install -save 对当前程序安装 运行依赖npminstall -save -dev 安装开发时的依赖在创建JavaScript模块时，export 语句用于从模块中导出实时绑定的函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。// 导出单个特性export let name1, name2, …, nameN; // also var, constexport let name1 = …, name2 = …, …, nameN; // also var, constexport function FunctionName(){...}export class ClassName {...}// 导出列表export { name1, name2, …, nameN };// 重命名导出export { variable1 as name1, variable2 as name2, …, nameN };// 解构导出并重命名export const { name1, name2: bar } = o;// 默认导出export default expression;export default function (…) { … } // also class, function*export default function name1(…) { … } // also class, function*export { name1 as default, … };// 导出模块合集export * from …; // does not set the default exportexport * as name1 from …; // Draft ECMAScript® 2O21export { name1, name2, …, nameN } from …;export { import1 as name1, import2 as name2, …, nameN } from …;export { default } from …;ts编译如果可以用ts库，tsc如果ts库不是全局安装又安装了nodejs，npx tscwebpack未全局安装https://blog.csdn.net/weixin_43167459/article/details/105032112set-executionpolicy remotesigned入口文件方便引用body onloadwindow.onloadwindow.loadjs里的window指整个页面，所有JS全局对象、函数以及变量均自动成为windows对象的成员网页中的某些JavaScript脚本代码往往需要在文档加载完成后才能够去执行，否则可能导致无法获取对象的情况，为了避免类似情况的发生，可以使用以下两种方式:（1）.将脚本代码放在网页的底端，运行脚本代码的时候，可以确保要操作的对象已经加载完成。（2）.通过window.onload来执行脚本代码。webpackobject与any" }, { "title": "一道js执行顺序的题", "url": "/posts/%E4%B8%80%E9%81%93js%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E7%9A%84%E9%A2%98%E7%9B%AE/", "categories": "js", "tags": "javascript", "date": "2022-04-19 02:34:00 +0000", "snippet": "执行顺序分析 立即执行的异步函数，且函数体内没有await，可以认为是一个普通的同步函数 此时a函数中形参num=0，输出 1-0，然后进入b函数 b函数是一个异步函数，函数体内有await 此时b函数中形参num=0，++写在后面，先计算再自增，输出 3-0 await函数同步执行，进入c函数 此时c函数中形参num=0，++写在后面，先计算再自增，输出 5-0 setTimeout()注册宏任务，往下执行，++写在前面，先自增后计算，输出 7-1，c函数运行结束 c函数运行结束，回到b函数中，await后面的函数为回调函数，微任务1注册后，回到a函数 a函数中，往下执行，输出 5-1，因为num在c函数中已经自增了，a函数运行完成 进入promise函数，promise函数体内是同步执行，then后为执行成功后的回调函数 输出 8-0，因为之前的是形参num，对n没有影响，注册then后面的微任务2 输出 10-false，因为++写在后面，先计算再自增，返回false 输出 8-1，因为n计算后进行了自增 主线程结束，现在有两个微任务2和一个等宏任务待执行，此时num=1，n=1 执行微任务2，输出 4-2，此时num=2，因为++写在前面，num=1再进行一次自增 执行微任务2，输出 9-1，此时n=1，因为++写在后面 微任务执行完成，执行下一个宏任务 输出 6-1，这里比较难理解，这里的num是存在c函数作用域中num，num作为形参传入函数，此时num=0，先执行 5-0，再执行7-1，最后执行setTimeout()传入的num=1" }, { "title": "我的第一篇博文", "url": "/posts/first-post/", "categories": "随笔", "tags": "生活", "date": "2022-04-13 02:34:00 +0000", "snippet": "感谢关注～这里可以放代码片段噢～//代码片段int main(){ hello world;}" }, { "title": "你好，世界！", "url": "/posts/hello-world/", "categories": "随笔", "tags": "生活", "date": "2022-03-26 02:34:00 +0000", "snippet": "感谢关注～这里可以放代码片段噢～//代码片段int main(){ hello world;}" } ]
