<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>WinnieZ</title><subtitle>这是通过Chirpy主题配置而成的</subtitle> <updated>2022-07-06T08:12:15+00:00</updated> <author> <name>Winniez</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Winniez </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>在服务器上发布页面</title><link href="/posts/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%8F%91%E5%B8%83%E9%A1%B5%E9%9D%A2/" rel="alternate" type="text/html" title="在服务器上发布页面" /><published>2022-07-05T02:34:00+00:00</published> <updated>2022-07-05T02:34:00+00:00</updated> <id>/posts/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%8F%91%E5%B8%83%E9%A1%B5%E9%9D%A2/</id> <content src="/posts/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%8F%91%E5%B8%83%E9%A1%B5%E9%9D%A2/" /> <author> <name>WinnieZ</name> </author> <category term="服务器" /> <summary> </summary> </entry> <entry><title>服务器科普</title><link href="/posts/%E6%9C%8D%E5%8A%A1%E5%99%A8/" rel="alternate" type="text/html" title="服务器科普" /><published>2022-05-19T02:34:00+00:00</published> <updated>2022-05-19T02:34:00+00:00</updated> <id>/posts/%E6%9C%8D%E5%8A%A1%E5%99%A8/</id> <content src="/posts/%E6%9C%8D%E5%8A%A1%E5%99%A8/" /> <author> <name>WinnieZ</name> </author> <category term="服务器" /> <summary> 服务器软件大科普！_哔哩哔哩_bilibili 静态服务：主要提供静态资源，不同用户访问到的资源相同 动态服务：提供动态服务，不同用户访问到的资源不同 服务器的几个叫法： web服务器：广义上来说，就是响应用户的需求，提供服务，当下所有的服务器软件都可以称之为web服务器软件 HTTP服务器(静态服务)：使用HTTP协议传输资源，提供服务 应用服务器(动态服务)：一个特定应用的承载容器 常见的轻量级服务器软件： 1、Nginx：典型的静态服务器，可做反向代理、负载均衡，一般放在最前面直面用户，和后端Tomcat打配合；纯C写的，性能贼高、内存消耗极少、稳定性也相当好，互联网公司重度使用 2、Tengine：阿里出品，基于Nginx服务器做的改造(加强和封装)，对大流量场景做了很多高级功能，性能、稳定性优秀 3、Apache http server：也是静态服务器，但是不... </summary> </entry> <entry><title>js数据结构与算法</title><link href="/posts/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/" rel="alternate" type="text/html" title="js数据结构与算法" /><published>2022-05-19T02:34:00+00:00</published> <updated>2022-05-19T02:34:00+00:00</updated> <id>/posts/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id> <content src="/posts/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/" /> <author> <name>WinnieZ</name> </author> <category term="数据结构与算法" /> <summary> 数组 数组操作 numbers = [] //末尾处添加或者删除 numbers.push() numbers.pop() //开头处添加或者删除 numbers.unshift() numbers.shift() //指定位置添加或者删除 numbers.splice(位置,数量) numbers.splice(位置,0,插入的数) forEach迭代不会返回新数组,map会返回新数组,map函数储存了结果的数组 从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例。 数组排序 numbers.reverse() numbers.sort(fn) //默认为字符串排序,数组时字符串元素时比较首字母的ASCII值,可以设置比较函数 数组搜索 numbers.indexOf(number) //如果包含，返回索引，不包含，返回-1 numbers.f... </summary> </entry> <entry><title>js_Github资源</title><link href="/posts/js_Github%E8%B5%84%E6%BA%90/" rel="alternate" type="text/html" title="js_Github资源" /><published>2022-05-19T02:34:00+00:00</published> <updated>2022-05-19T02:34:00+00:00</updated> <id>/posts/js_Github%E8%B5%84%E6%BA%90/</id> <content src="/posts/js_Github%E8%B5%84%E6%BA%90/" /> <author> <name>WinnieZ</name> </author> <category term="js学习资源" /> <summary> 1.javascript-algorithms(基于javascript的算法和数据结构) https://github.com/trekhleb/javascript-algorithms 2.nodebestpractices(Node.js最佳实践) https://github.com/goldbergyoni/nodebestpractices 3.You-Dont-Know-JS(你不知道的js这本书的开源版本) https://github.com/getify/You-Dont-Know-JS 4.clean-code-javascript(教你如何写出更好可读性的js代码) https://github.com/ryanmcdermott/clean-code-javascript 5.30-seconds-of-code(开发时常用的简短代码) https://g... </summary> </entry> <entry><title>地图投影</title><link href="/posts/%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1/" rel="alternate" type="text/html" title="地图投影" /><published>2022-05-17T02:34:00+00:00</published> <updated>2022-07-06T08:08:35+00:00</updated> <id>/posts/%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1/</id> <content src="/posts/%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1/" /> <author> <name>WinnieZ</name> </author> <category term="GIS基础" /> <summary> 概述 地理坐标系 地理坐标系是基于椭球的 将静止的水面形容地球表面的基准，延伸到陆地得到大地水准面，大地水准面也包含着高程信息 将水准面近似一个椭球，用一个数学公式形容这个椭球，得到椭球体(Ellipsoid)，因为需要被数学公式表达，所以高程信息被简化了。这一步只是用数学公式的五个参数大致描述了地球的形状 地球表面上的物体具有高程，在椭球体的基础上考虑高程信息，得到基准面(Datum)，基准面确定了x y z和坐标原点，不同基准面可以通过七参数转换，坐标系在这一步建立了，上一步的椭球体不需要坐标系 所有的计算是基于椭球体的，有时候需要根据不同的地理位置考虑拟合最好的方法，我们基于基准面将椭球体进行移动，得到参考椭球体，即根据基准面确定位置的椭球体，椭球体+基准面 = 参考椭球体 经纬度是基于参考椭球体的 地理坐标系是一套东西，不是某一个... </summary> </entry> </feed>
